using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Text;
using System.Threading.Tasks;

namespace CoreStripper
{
    class Program
    {
        static void Main(string[] args)
        {
            string fileIn = Environment.CurrentDirectory + @"\Generated_Source\PSoC6\cyfitter_cfg.c";
            Console.WriteLine(
                "****************************************************\r\n" +
                "*          Onethinx CoreStripper Tool 1.21          *\r\n" +
                "*   The source code of this tool can be found at    *\r\n" +
                "* https://github.com/onethinx/Onethinx_CoreStripper *\r\n" +
                "*                (c) Rolf / Onethinx                *\r\n" +
                "****************************************************\r\n" +
                "Target file: " + fileIn
                 );
            if (File.Exists(fileIn))
            {
                List<string> lines = parseCyFitterCfg(fileIn);
#if (DEBUG)
                File.WriteAllLines(fileIn + "2.c", lines);
#else
                File.WriteAllLines(fileIn, lines);
#endif
                Environment.Exit(0);
            }
            else
            {
                Console.WriteLine("Error, can not find target file!");
                Environment.Exit(1);
            }
            
        }

        private static List<string> parseCyFitterCfg(string cFileName)
        {
            string[] cFile = File.ReadAllLines(cFileName);
            List<string> outfile = new List<string>() { };

            bool copying = true;
            int stopOverCnt = 0;
            int startOverCnt = 0;
            string stopInfo = "";
            string startInfo = "";


            for (int cnt = 0; cnt < cFile.Length; cnt++)
            {
                string cline = cFile[cnt];
                if ((stopOverCnt > 0) && (--stopOverCnt == 0))
                {
                    outfile.Add(stopInfo);
                    copying = false;
                }
                if ((startOverCnt > 0) && (--startOverCnt == 0))
                {
                    outfile.Add(startInfo);
                    copying = true;
                }
                if (cline == @"* This file is automatically generated by PSoC Creator.")
                {
                    string newline = @"* This file was automatically generated by PSoC Creator and is ported for universal use by a Onethinx Tool (c).";
                    outfile.Add(newline);
                    Console.WriteLine("Changed line " + cnt.ToString() + " to: " + newline);
                    continue;
                }
                else if (cline == @"	status = Cy_SysClk_WcoEnable(500000u);")
                {
                    string newline = @"	status = CY_RET_SUCCESS;          // Removed enabling of WCO as it is already enabled by the Onethinx Core: status = Cy_SysClk_WcoEnable(500000u);";
                    outfile.Add(newline);
                    Console.WriteLine("Changed line " + cnt.ToString() + " to: " + newline);
                    continue;
                }
                else if (cline.StartsWith(@"	Cy_SysLib_SetWaitStates")) { if (!copying) outfile.Add(cline); }
                //if (cline == @"static void ClockInit(void)")
                //{
                //    Console.WriteLine("Found ClockInit() at line " + cnt + ", skipping code...");
                //    stopInfo = @"	/* Removed Non UDB config code by OnethinxTool */";
                //    stopOverCnt = 2;
                //}
                //else 
                //if (cline == @"	/* Configure peripheral clock dividers */")
                //{
                //    Console.WriteLine("Found peripheral clock setting at line " + cnt + ", adding code...");
                //    copying = true;
                //}
                else if (cline == @"void Cy_SystemInit(void)")
                {
                    Console.WriteLine("Found Cy_SystemInit() at line " + cnt + ", skipping code...");
                    //cline = @"void UDBInit(void)";
                    stopInfo =
                        @"	CyDelay(1500); /* Failsafe guard: wrong clocksettings may brick the Onethinx module. Remove this delay in the release version. */" + "\r\n\r\n" +
                        @"	/* Removed Onethinx Core conflicting code by Onethinx CoreStripper */" + "\r\n";
                        
                    stopOverCnt = 2;
                }
                //else if (cline == @"   /* Clock */")
                //else if ((!copying) && (cline == @"	/* Perform Trigger Mux configuration */"))
                else if (cline == @"	/* PMIC Control */")
                {
                    startInfo = @"	/* Resume non-conflicting code by Onethinx CoreStripper */";
                    startOverCnt = 3;
                }
                if (copying) outfile.Add(cline);
                else outfile.Add(@"	//" + cline);
            }
            return outfile;
        }
    }
}
